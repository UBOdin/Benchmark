#!/usr/bin/python

import argparse
import subprocess
import sys

parser = argparse.ArgumentParser(description='The PocketData Benchmark for SQLite and Berkeley Db.')
args = parser.parse_args()

#android_id = "02c566fa093765eb" # Grant's main test phone
#android_id = "ZX1G22TKW7" # Ed's old phone
#android_id = "199020104301402615" # Dragonboard 8074
android_id = "ZX1G22LXTH" # Nexus 6 wired for Monsoon

def help_message():
	print '\nCommand List:\n'
	print '	[bdb a] Workload A on Berkeley Db	[sql a] Workload A on SQLite'
	print '	[bdb100 a] Workload A on Berkeley Db with 100MB Cache'
	print
	print '	[bdb b] Workload B on Berkeley Db	[sql b] Workload B on SQLite'
	print '	[bdb100 b] Workload B on Berkeley Db with 100MB Cache'
	print
	print '	[bdb c] Workload C on Berkeley Db	[sql c] Workload C on SQLite'
	print '	[bdb100 c] Workload C on Berkeley Db with 100MB Cache'
	print
	print '	[bdb d] Workload D on Berkeley Db	[sql d] Workload D on SQLite'
	print '	[bdb100 d] Workload D on Berkeley Db with 100MB Cache'
	print
	print '	[bdb e] Workload E on Berkeley Db	[sql e] Workload E on SQLite'
	print '	[bdb100 e] Workload E on Berkeley Db with 100MB Cache'
	print
	print '	[bdb f] Workload F on Berkeley Db	[sql f] Workload F on SQLite'
	print '	[bdb100 f] Workload F on Berkeley Db with 100MB Cache'
	print
	print '	[bdb ia] Workload IA on Berkeley Db	[sql ia] Workload IA on SQLite'
	print '	[bdb100 ia] Workload IA on Berkeley Db with 100MB Cache'
	print
	print '	[bdb ib] Workload IB on Berkeley Db	[sql ib] Workload IB on SQLite'
	print '	[bdb100 ib] Workload IB on Berkeley Db with 100MB Cache'
	print
	print '	[bdb ic] Workload IC on Berkeley Db	[sql ic] Workload IC on SQLite'
	print '	[bdb100 ic] Workload IC on Berkeley Db with 100MB Cache'
	print
	print '	[bdb all] All workloads on Berkeley Db'
	print
	print '	[bdb100 all] All workloads on Berkeley Db with 100MB Cache'
	print
	print '	[sql all] All workloads on SQLite'
	print
	print '	[all] All workloads, on all databases'
	print
	print '	[mutiple/multi/m] Brings up prompt to run multiple workloads at a time'
	print
	print '	[a/analytics] Brings up the analytics menu'
	print
	print '	[quit/q/exit] exits the program'
	print

def setup_app(name):
	subprocess.call(['sh','scripts/setup/' + name + '.sh'])

def command(string_array):

	databases = ["SQL", "WAL", "BDB", "BDB100", "NULL"]
	workloads = ["A", "B", "C", "D", "E", "F", "IB", "IC", "N"]
	governors = ["performance", "interactive", "conservative", "ondemand", "userspace", "powersave"]
	speeds = ["x", "300000", "422400", "652800", "729600", "883200", "960000", "1036800", "1190400", "1267200", "1497600", "1574400", "1728000", "1958400", "2265600", "2457600", "2496000", "2572800", "2649600"]
	delays = ["0ms", "1ms", "lognormal", "null"]

	database = ""
	workload = ""
	#governor = "ondemand" # Nexus 5 default
	#governor = "interactive" # Nexus >= 6 default
	governor = "userspace"
	speed = "1267200" # Only valid if governor == "userspace"
	delay = "0ms"
        threads = "1"

	result = 0

	database = string_array[0].upper()
	workload = string_array[1].upper()
	governor = string_array[2]
	speed = string_array[3]
	delay = string_array[4]

	print("PARAMETERS:")
	print(string_array)

	'''
        if (database == "BDB"):
                print("Doing SQL")
                sys.exit()
        #end_if
	'''

	# Parameter validity check:
	if ((database not in databases) or (workload not in workloads) or (governor not in governors) or (speed not in speeds) or (delay not in delays)):
		print("Invalid benchmark request")
		return 1
	#end_if

	if (governor != "userspace"):
		speed = "none" # Don't use slashes (messes with subdirectories) or parentheses (messes with scripting)
	#end_if

	print("Running " + database + " " + workload)
	check = device_connected()
	if (check == False):
		print("No Device Connected!")
		return 0
	#end_if

	while (True):

		print("setting up phone...")
		subprocess.call(['sh', 'scripts/phone_setup.sh', android_id])
		print("success")

		print("building and installing app...")
		subprocess.call(['sh', 'scripts/build.sh'])
		print("success")

		print("running...")
		result = subprocess.call(['sh', 'scripts/run.sh', android_id, database, workload, governor, speed, delay, threads])
		print("log is present in the logs directory.")

		print("SCRIPT RESULT:  " + str(result))

		if (result != 4):
			break
		#end_if
		print("Dropped loglines.  Re-running.")

	#end_while

	if (result != 0):
		print("Error on script:  " + str(result))
		sys.exit(1)
	#end_if

	return result

#end_def
	
def device_connected():
	temp_file = open("temp.txt",'w')
	subprocess.call(['adb', 'devices'], stdout=temp_file, stderr=temp_file)
	temp_file.close()
	tester = 1
	with open("temp.txt",'r') as log:
		for line in log:
			if 'device\n' in line:
				tester = 0
	subprocess.call(['rm', 'temp.txt'])
	if tester == 1:
		return False
	else:
		return True

def multi_run():
	print 'Please enter the desired workloads seperated by commas.'
	input2 = raw_input('benchmark_mutli_run...$ ')
	input2 = input2.split(',')
	for string in input2:
		stripped = string.strip()
		try:
			command(stripped.split())
		except IndexError:
			pass

def run_analytics(command,dbtype,logname):
	temp2_file = open("temp2.txt",'w')
	subprocess.call(['zgrep', 'Workload', 'logs/'+logname], stdout=temp2_file, stderr=temp2_file)
	temp2_file.close()
	temp2_file = open("temp2.txt",'r')
	info_file_name = ''
	for line in temp2_file:
		line = line.split('{"EVENT":"')[1].split('"}')
		temp = line[0].split()
		count = 0
		for s in temp:
			if count == len(temp) - 1:
				# N.b. for WAL tracefiles, SQL is actual DB used (and recorded in key lines).
				# Adjust save filename:
				if ((dbtype == "WAL") and (s == "SQL")):
					s = "WAL"
				#end_if
				info_file_name += s
			else:
				info_file_name += s + '_'
			count += 1
		break

	temp2_file.close()

	subprocess.call(['rm','temp2.txt'])
	if command == 'sanity_check':
		info_file_name += '.waiting_on_io_info'
		save_file = open("logs/info/" + info_file_name,'w')
		print 'running sanity checking script for ' + logname + '. please wait ...'
		subprocess.call(['python', 'scripts/analytics/findtimeblockedonio.py', dbtype, 'logs/' +logname], stdout=save_file, stderr=save_file)
		print 'complete'
		save_file.close()
	elif command == 'sanity_check-s':
		info_file_name += '.waiting_on_io_summary'
		save_file = open("logs/info/" + info_file_name,'w')
		print 'running sanity checking summary script for ' + logname + '. please wait ...'
		subprocess.call(['python', 'scripts/analytics/findtimeblockedonio.py', dbtype, 'logs/' +logname, '--summary'], stdout=save_file, stderr=save_file)
		print 'complete'
		save_file.close()
	elif command == 'latency':
		info_file_name += '.latency_info'
		save_file = open("logs/info/" + info_file_name,'w')
		print 'running latency script for ' + logname + '. please wait ...'
		subprocess.call(['python', 'scripts/analytics/findlatency2.py', dbtype, 'logs/' +logname], stdout=save_file, stderr=save_file)
		print 'complete'
		save_file.close()
	elif command == 'latency-s':
		info_file_name += '.latency_summary'
		save_file = open("logs/info/" + info_file_name,'w')
		print 'running latency summary script for ' + logname + '. please wait ...'
		subprocess.call(['python', 'scripts/analytics/findlatency2.py', dbtype, 'logs/' +logname, '--summary'], stdout=save_file, stderr=save_file)
		print 'complete'
		save_file.close()
	elif command == 'time':
		info_file_name += '.time_info'
		save_file = open("logs/info/" + info_file_name,'w')
		print 'running time script for ' + logname + '. please wait ...'
		subprocess.call(['python', 'scripts/analytics/findtime.py', dbtype, 'logs/' +logname], stdout=save_file, stderr=save_file)
		print 'complete'
		save_file.close()
	elif command == 'time-s':
		info_file_name += '.time_summary'
		save_file = open("logs/info/" + info_file_name,'w')
		print 'running time summary script for ' + logname + '. please wait ...'
		subprocess.call(['python', 'scripts/analytics/findtime.py', dbtype, 'logs/' +logname, '--summary'], stdout=save_file, stderr=save_file)
		print 'complete'
		save_file.close()
	else:
		print 'invalid command'

def analytics(command):
	if (command != 'sanity_check' and command != 'sanity_check-s' and
	 command != 'latency' and command != 'latency-s' and
	 command != 'time' and command != 'time-s'):
		print 'invalid command'
		return
	temp_file = open("temp.txt",'w')
	subprocess.call(['ls', 'logs/'], stdout=temp_file, stderr=temp_file)
	temp_file.close()
	temp_file = open("temp.txt",'r')
	for logname in temp_file:
		dbtype = ''
		if 'sql' in logname:
			dbtype = 'SQL'
			run_analytics(command,dbtype,logname.split('\n')[0])
		elif 'wal' in logname:
			dbtype = 'WAL'
			run_analytics(command,dbtype,logname.split('\n')[0])
		elif 'bdb' in logname:
			dbtype = 'BDB'
			run_analytics(command,dbtype,logname.split('\n')[0])
		elif 'info' in logname:
			continue
		else:
			print 'invalid log file'
			break
	temp_file.close()
	subprocess.call(['rm','temp.txt'])

def analytics_menu():
	print 'Please enter one of the following commands:'
	print 'WARNING: (This will run on all logs present in the "logs" directory)'
	print
	print '	[sanity_check] Runs the sanity checking script (find time waiting for each IO)	[sanity_check-s] Summary of time waiting on IO'
	print
	print ' [latency] Runs the script for full info for all IO events	[latency-s] Summary of latency info'
	print
	print '	[time] Runs the script for full time info per each PID present during the workload	[time-s] Summary of times per PID'
	print
	print '	[quit/q/exit] exits the program'
	print

	while True:
		input3 = raw_input('benchmark_analytics...$ ')
		input3 = input3.split()
		if input3[0].lower() == 'quit' or input3[0].lower() == 'exit' or input3[0].lower() == 'q':
			break
		else:
			analytics(input3[0])
		
	

def run_all(input_array):
	if input_array[0] == 'bdb':
		array = ['bdb a','bdb b','bdb c','bdb d','bdb e','bdb f','bdb ia','bdb ib','bdb ic']
		for string in array:
			command(string.split())
	elif input_array[0] == 'sql':
		array = ['sql a','sql b','sql c','sql d','sql e','sql f','sql ib','sql ic']
		for string in array:
			command(string.split())
	elif input_array[0] == 'wal':
		array = ['wal a','wal b','wal c','wal d','wal e','wal f','wal ia','wal ib','wal ic']
		for string in array:
			command(string.split())
	elif input_array[0] == 'bdb100':
		array = ['bdb100 a','bdb100 b','bdb100 c','bdb100 d','bdb100 e','bdb100 f','bdb100 ia','bdb100 ib','bdb100 ic']
		for string in array:
			command(string.split())
	elif input_array[0] == 'all':
		array = ['bdb100 a','bdb100 b','bdb100 c','bdb100 d','bdb100 e','bdb100 f','bdb100 ib','bdb100 ic','sql a','sql b','sql c','sql d','sql e','sql f','sql ib','sql ic','bdb a','bdb b','bdb c','bdb d','bdb e','bdb f','bdb ib','bdb ic']
		for string in array:
			command(string.split())
	else:
		print 'invalid command'
	#end_if
#end_def


def main():

	while True:
		input = raw_input('benchmark...$ ')
		try:
			input = input.split()
			if input[0].lower() == 'quit' or input[0].lower() == 'exit' or input[0].lower() == 'q':
				break

			if input[0].lower() == 'mutiple' or input[0].lower() == 'multi' or input[0].lower() == 'm':
				multi_run()
				continue

			if 'all' in input:
				run_all(input)
				continue

			if (input[0].lower() == "only"):
				workload = input_array[1]
				#parameter_list = ["sql " + workload, "wal " + workload, "bdb " + workload, "bdb100 " + workload]
				parameter_list = ["sql " + workload, "bdb " + workload]
				for parameters in parameter_list:
					command(parameters.split())
				#end_for
			#end_if

			skip_count = 0

			if (input[0].lower() == "what"):
				#workload_list = ["sql a", "sql b", "sql c", "sql e", "bdb a", "bdb b", "bdb c", "bdb e"]
				#workload_list = ["sql a", "sql b", "sql c", "sql e"]
				workload_list = ["null n"]

				governor_list = ["userspace 300000", "userspace 1267200", "userspace 2649600", "interactive x", "ondemand x"]

				#delay_list = ["0ms", "lognormal"]
				delay_list = ["null"]

				subprocess.call(["rm", "monsoonlog.txt"])
				subprocess.call(["rm", "progressfile.txt"])
				for delay in delay_list:
					for governor in governor_list:
						for workload in workload_list:
							parameters = workload + " " + governor + " " + delay
							if (skip_count >= 0):

								#print("Would do %s" % (parameters))
								#sys.exit(1)

								result = command(parameters.split())
							else:
								print("Skipping workload %d:  %s" % (skip_count, parameters))
							#end_if
							skip_count += 1
						#end_for
					#end_for
				subprocess.call(["mv", "monsoonlog.txt", "energy"])
				subprocess.call(["mv", "progressfile.txt", "energy"])
				#end_for
			#end_if

			if (input[0].lower() == "that"):
				for i in range(1):
					parameters = "sql a userspace 1267200 0ms"
					command(parameters.split())
				#end_for
			#end_if

			if input[0].lower() == 'a' or input[0].lower() == 'analytics':
				analytics_menu()
				continue

			if input[0].lower() == 'help' or input[0].lower() == 'menu':
				help_message()
				continue
		except IndexError:
			pass
		#end_try
		code = 1
		try:
			code = command(input)
		except IndexError:
			pass
		#end_try
		if code == 0:
			continue
		#end_if
		if code < 0:
			print 'Program exited with error code: ' + str(code)
			break
		#end_if
		print 'invalid command'

	#end_while
#end_def


main()


